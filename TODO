Here are some things to do, in no particular order.

Write more unit tests.

Switch to setuptools.

Use single representation for netlists/AST

Perhaps store initial circuit using time domain representation, then
convert to s-domain for analysis, instead of waltzing straight into
s-domain?

Speed up residue calculation  (perhaps can try without taking limit...)

Handle mechanical and acoustical components.  Perhaps lower case for
mechanical/acoustical.  For example,

Force      f  (N)
Mass       m  (kg)
Spring     k  (N/m)
Damper     r  (kg/s)
Velocity   u  (m/s)

Support both electro-mechnical analogues?  cct.electrical_analogue(1)?
m -> L, C
k -> C, L
f -> I, V
u -> V, I

Expand two-ports, xtals, opamps, etc.   cct = cct.expand()
Perhaps have arg to expand to select components and/or types of
component to expand?

When expanding, still need to know original nodes for determining
voltage, say across a capacitor when it expanded into a series
comb. of an impedance and voltage source.  Perhaps retain the
component in the netlist but prefix it with some symbol such as @.
So C1 2 1 5 2 expands to
C#1 2 dummy 5
V#1 dummy 1 2
@C1 2 1 5 2

The @symbol says not to draw or analyse cpt.  But the name C1 will be
added to the directories for the current and voltage.


Generalise two-port representation to avoid transformations from a
singular matrix.

There are several options for handling initial conditions:
1.  Assume all independent sources = 0 for t < 0 and thus
    all the initial conditions are 0.
2.  Ignore independent sources for t < 0 and rely on user
    to calculate and specify initial conditions.   This is the current
    behaviour.
3.  Determine initial conditions from the independent sources.  This is
    tricky for arbitrary excitations.

In each case the result is only valid for t >= 0 unless independent
sources = 0 for t < 0 in which case the initial conditions should be
zero and the response is 0 for t < 0.

Option 3 is tricky in general.  We could treat each independent source
independently(!) and sum the individual responses.

sV assume v(t) = 0 for t < 0; initial conditions are zero.
Vdc know v(t) = V for all t; no discontinuities.  Use DC analysis or solve the pre-initial model.
Vac know v(t) for all t; no discontinuities.  Use AC analysis.
Vsin know v(t) for all t; no discontinuities.  Use AC analysis.
V can evaluate v(t) for all t; hard to determine discontinuities.  Could consider special cases.

Add Vsin and Isin.

Add consistent mapping of unit step, dirac delta, etc.

Warn user when calculations may take a while, say when inverting a
large matrix.

Handle multiple SVG images displayed in notebook due to problems with
shared namespace.

Perhaps add H, I, V, Y, Z methods to Expr classes to create
appropriate subclasses?

Automatically separate parallel components when drawing (except open
circuits).  The tricky part is adding enough space for the labels,

Add || operator to sympy!

Push for Sympy to consider lower limit of Laplace transform integral
to sneak past 0 so that DiracDelta(t) -> 1 instead of 0.5

sym.limit(sym.DiracDelta(t), t, 0, dir='-') -> 0

Remove { when printing Piecewise with single condition?  Line 911
sympy/printing/pretty/pretty.py

Add drawing methods to TwoPorts.

Add crystal for schematics (XT) but not supported by circuitikz.

Add thevenin/norton methods to NetObject?  Thevenin/Norton models are
 frequency domain concepts so should these attempt to convert the
 sources back to the time domain?

Simplify series and parallel impedances

Add passive network synthesis to generate R, L, C network given an
impedance...

Input impedance aka driving point impedance
 
https://en.wikipedia.org/wiki/Wikipedia:WikiProject_Electronics/Programs

Warn if have disjoint components

Opamp circuitikz scale is by area, xscale, yscale linear.

size controls node-spacing, it does not make component larger but only affects
the length of the leads

scale controls component size, it does not change node spacing
(perhaps it should)

Add crystal and ferrite bead components to Circuitikz.

Add generic amplifier to Circuitikz or add up and down anchors to
buffer and inverter.

Fix thevenin/norton for simple ac/dc examples without going into s-domain.

Tweak cpt method.  Should V('V1') -> Vdc('V1') or V('V1')?

Add motor symbol to schematics

Add ferrite bead symbol to schematics

How to analyse components with namespace in name?  The trouble is
that, if the node is a.1 we create V_a.1 but this cannot be parsed by
sympy.  We could replace the dot with an underscore but cannot keep
adding subscripts.  This is where using macros or subcircuits has an
advantage since we map the nodes to reasonable names.  We culd do
something grubby such as replacing the dot with a z.


U1 chip2120 _1 _2 VSS _4 _5 VDD; right
W 7 U1._1; right

To avoid referencing component pins by component name could specify
labels separately, for example,

U1 chip2120 1 2 3#VSS 4 5 6#VDD; right
W 7 1; right

or alternatively

U1 chip2120 1 2 3 4 5 6; right, pins=,,VSS,,VDD
W 7 1; right

The latter separates the schematic labels from the circuit connections.

We could implement something like

U1 chip2120 1 2 .VDD 4 5 .VSS; right, pins=,,VSS,,VDD

and refer to the nodes as U1.VDD U1.VSS etc.  However, this does not
avoid the problem of dots in node names when passed to sympy.

Tidy docs

s-model convert current, voltage labels to s-domain, say i -> I


Add gyrator component
